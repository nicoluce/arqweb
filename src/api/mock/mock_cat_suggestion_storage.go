// Code generated by MockGen. DO NOT EDIT.
// Source: suggestion_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "github.com/fernetbalboa/arqweb/src/api/domain"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockSuggestionStorage is a mock of SuggestionStorage interface
type MockSuggestionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestionStorageMockRecorder
}

// MockSuggestionStorageMockRecorder is the mock recorder for MockSuggestionStorage
type MockSuggestionStorageMockRecorder struct {
	mock *MockSuggestionStorage
}

// NewMockSuggestionStorage creates a new mock instance
func NewMockSuggestionStorage(ctrl *gomock.Controller) *MockSuggestionStorage {
	mock := &MockSuggestionStorage{ctrl: ctrl}
	mock.recorder = &MockSuggestionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuggestionStorage) EXPECT() *MockSuggestionStorageMockRecorder {
	return m.recorder
}

// SaveSuggestion mocks base method
func (m *MockSuggestionStorage) SaveSuggestion(suggestion *domain.CategorySuggestion) (*domain.CategorySuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSuggestion", suggestion)
	ret0, _ := ret[0].(*domain.CategorySuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSuggestion indicates an expected call of SaveSuggestion
func (mr *MockSuggestionStorageMockRecorder) SaveSuggestion(suggestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSuggestion", reflect.TypeOf((*MockSuggestionStorage)(nil).SaveSuggestion), suggestion)
}

// ApproveOrRejectSuggestion mocks base method
func (m *MockSuggestionStorage) ApproveOrRejectSuggestion(id primitive.ObjectID, approve bool) (*domain.CategorySuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveOrRejectSuggestion", id, approve)
	ret0, _ := ret[0].(*domain.CategorySuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveOrRejectSuggestion indicates an expected call of ApproveOrRejectSuggestion
func (mr *MockSuggestionStorageMockRecorder) ApproveOrRejectSuggestion(id, approve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrRejectSuggestion", reflect.TypeOf((*MockSuggestionStorage)(nil).ApproveOrRejectSuggestion), id, approve)
}

// GetPendingSuggestions mocks base method
func (m *MockSuggestionStorage) GetPendingSuggestions() ([]domain.CategorySuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingSuggestions")
	ret0, _ := ret[0].([]domain.CategorySuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingSuggestions indicates an expected call of GetPendingSuggestions
func (mr *MockSuggestionStorageMockRecorder) GetPendingSuggestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingSuggestions", reflect.TypeOf((*MockSuggestionStorage)(nil).GetPendingSuggestions))
}
